{"version":3,"sources":["images/energy.png","components/Energias.jsx","components/Contador.jsx","images/Estatua.png","components/Header.jsx","App.js","serviceWorkerRegistration.js","index.js"],"names":["Energias","round","energie","className","alt","src","Energia","Contador","useState","energies","setEnergies","setRound","useEffect","console","log","onClick","e","style","marginBottom","width","height","fontSize","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mNAAe,MAA0B,mC,OCe1BA,EAZE,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACzB,OACE,qBAAKC,UAAU,sBAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,qBAAKA,UAAU,MAAMC,IAAI,UAAUC,IAAKC,IACxC,+BAAKJ,EAAL,SACA,wCAAWD,WCwDJM,GCjEA,IDIE,WAAO,IAAD,EACWC,mBAAS,GADpB,mBACdC,EADc,KACJC,EADI,OAGKF,mBAAS,GAHd,mBAGdP,EAHc,KAGPU,EAHO,KAKrBC,qBAAU,WACRC,QAAQC,IAAI,YACX,IAqBH,OACE,sBAAKX,UAAU,YAAf,UACE,cAAC,EAAD,CAAUF,MAAOA,EAAOC,QAASO,IACjC,sBAAKN,UAAU,mBAAf,UACE,wBAAQA,UAAU,qBAAqBY,QAvB5B,WACXN,EAAW,IAAIC,GAAY,SAACM,GAAD,OAAOA,EAAI,MAsBtC,wBAGA,wBACEC,MAAO,CAAEC,aAAc,QACvBf,UAAU,mBACVY,QA1BU,WACZN,EAAW,GAAGC,GAAY,SAACM,GAAD,OAAOA,EAAI,MAsBrC,wBAOA,wBACEb,UAAU,+BACVc,MAAO,CAAEE,MAAO,QAASC,OAAQ,OAAQC,SAAU,QACnDN,QA9BW,WACjBJ,GAAS,SAACK,GAAD,OAAOA,EAAI,KAChBP,GAAY,EACdC,GAAY,SAACM,GAAD,OAAOA,EAAI,KACdP,EAAW,IACpBC,GAAY,SAACM,GAAD,OAAOA,EAAI,MAsBrB,uBAOA,wBACEb,UAAU,+BACVc,MAAO,CAAEE,MAAO,QAASC,OAAQ,OAAQC,SAAU,QACnDN,QA7BU,WAChBL,EAAY,GACZC,EAAS,IAwBL,+BE3COW,EARA,WACb,OACE,wBAAQnB,UAAU,SAAlB,SACE,qBAAKA,UAAU,OAAOC,IAAI,OAAOC,IAAI,uCCU5BkB,MATf,WACE,OACE,sBAAKpB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCEcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.a3585385.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/energy.8e1d660d.png\";","import React from \"react\";\r\nimport Energia from \"../images/energy.png\";\r\n\r\nconst Energias = ({ round, energie }) => {\r\n  return (\r\n    <div className=\"container-principal\">\r\n      <div className=\"container-element\">\r\n        <img className=\"img\" alt=\"energia\" src={Energia} />\r\n        <h2>{energie}/10</h2>\r\n        <h1>Ronda {round}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Energias;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Energias from \"./Energias\";\r\nimport Estatua from \"../images/Estatua.png\";\r\n\r\nconst Contador = () => {\r\n  const [energies, setEnergies] = useState(3);\r\n\r\n  const [round, setRound] = useState(1);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Render\");\r\n  }, []);\r\n\r\n  const hadleSum = () => {\r\n    if (energies < 10) setEnergies((e) => e + 1);\r\n  };\r\n  const hadleRest = () => {\r\n    if (energies > 0) setEnergies((e) => e - 1);\r\n  };\r\n  const hadleRound = () => {\r\n    setRound((e) => e + 1);\r\n    if (energies <= 8) {\r\n      setEnergies((e) => e + 2);\r\n    } else if (energies < 10) {\r\n      setEnergies((e) => e + 1);\r\n    }\r\n  };\r\n  const hadleGame = () => {\r\n    setEnergies(3);\r\n    setRound(1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Energias round={round} energie={energies} />\r\n      <div className=\"container-button\">\r\n        <button className=\"button color-green\" onClick={hadleSum}>\r\n          +1 ENERGIA\r\n        </button>\r\n        <button\r\n          style={{ marginBottom: \"15px\" }}\r\n          className=\"button color-red\"\r\n          onClick={hadleRest}\r\n        >\r\n          -1 ENERGIA\r\n        </button>\r\n        <button\r\n          className=\"button color-brown d-inblock\"\r\n          style={{ width: \"120px\", height: \"60px\", fontSize: \"16px\" }}\r\n          onClick={hadleRound}\r\n        >\r\n          SIGUIENTE\r\n        </button>\r\n        <button\r\n          className=\"button color-brown d-inblock\"\r\n          style={{ width: \"120px\", height: \"60px\", fontSize: \"16px\" }}\r\n          onClick={hadleGame}\r\n        >\r\n          REINICIAR\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contador;\r\n","export default __webpack_public_path__ + \"static/media/Estatua.ef4ef7f7.png\";","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <img className=\"logo\" alt=\"logo\" src=\"https://i.imgur.com/TFu95b5.png\" />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Contador from \"./components/Contador\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Contador />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.unregister();\n"],"sourceRoot":""}